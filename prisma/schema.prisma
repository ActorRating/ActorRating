generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Removed NextAuth user/account/session models. Users are managed by Supabase Auth.

model RateLimit {
  id          String   @id @default(cuid())
  ip          String
  action      String
  count       Int      @default(1)
  windowStart DateTime @default(now())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([ip, action, windowStart])
  @@index([ip, action])
}

model Actor {
  id           String        @id @default(cuid())
  name         String        @unique
  bio          String?
  imageUrl     String?
  birthDate    DateTime?
  nationality  String?
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  knownFor     String?
  tmdbId       Int?          @unique
  performances Performance[]
  ratings      Rating[]

  @@index([name])
}

model Movie {
  id           String        @id @default(cuid())
  title        String
  year         Int
  director     String?
  genre        String?
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  overview     String?
  tmdbId       Int?          @unique
  performances Performance[]
  ratings      Rating[]

  @@unique([title, year])
  @@index([title])
}

model Performance {
  id                     String   @id @default(cuid())
  userId                 String
  actorId                String
  movieId                String
  emotionalRangeDepth    Int      @db.SmallInt
  characterBelievability Int      @db.SmallInt
  technicalSkill         Int      @db.SmallInt
  screenPresence         Int      @db.SmallInt
  chemistryInteraction   Int      @db.SmallInt
  comment                String?
  createdAt              DateTime @default(now())
  updatedAt              DateTime @updatedAt
  character              String?
  actor                  Actor    @relation(fields: [actorId], references: [id], onDelete: Cascade)
  movie                  Movie    @relation(fields: [movieId], references: [id], onDelete: Cascade)

  @@unique([userId, actorId, movieId])
  @@index([actorId])
  @@index([movieId])
  @@index([actorId, movieId])
}

model Rating {
  id                     String      @id @default(cuid())
  userId                 String
  actorId                String
  movieId                String
  emotionalRangeDepth    Int         @db.SmallInt
  characterBelievability Int         @db.SmallInt
  technicalSkill         Int         @db.SmallInt
  screenPresence         Int         @db.SmallInt
  chemistryInteraction   Int         @db.SmallInt
  weightedScore          Float       @default(0)
  comment                String?
  createdAt              DateTime    @default(now())
  updatedAt              DateTime    @updatedAt
  slug                   String?     @unique
  shareScore             Int?        @db.SmallInt
  roleName               String?
  breakdown              Json?
  actor                  Actor       @relation(fields: [actorId], references: [id], onDelete: Cascade)
  movie                  Movie       @relation(fields: [movieId], references: [id], onDelete: Cascade)
  shareImage             ShareImage?
  shortLinks             ShortLink[]

  @@unique([userId, actorId, movieId])
  @@index([actorId])
  @@index([movieId])
  @@index([actorId, movieId])
}

model ShareImage {
  id        String   @id @default(cuid())
  ratingId  String   @unique
  feedUrl   String
  storyUrl  String
  ogUrl     String
  createdAt DateTime @default(now())
  rating    Rating   @relation(fields: [ratingId], references: [id], onDelete: Cascade)
}

model ShortLink {
  code       String       @id
  targetUrl  String
  ratingId   String?
  createdAt  DateTime     @default(now())
  clickCount Int          @default(0)
  clicks     ShareClick[]
  rating     Rating?      @relation(fields: [ratingId], references: [id])

  @@index([ratingId])
}

model ShareClick {
  id          String    @id @default(cuid())
  shortLinkId String
  referer     String?
  userAgent   String?
  ipHash      String?
  createdAt   DateTime  @default(now())
  shortLink   ShortLink @relation(fields: [shortLinkId], references: [code], onDelete: Cascade)

  @@index([shortLinkId])
}

model ServerEvent {
  id        String   @id @default(cuid())
  type      String
  ratingId  String?
  payload   Json?
  createdAt DateTime @default(now())

  @@index([type])
  @@index([ratingId])
}
